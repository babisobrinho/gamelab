document.addEventListener('DOMContentLoaded', () => {
    // Elementos DOM
    const elementos = {
        simonButtons: document.querySelectorAll('.simon-btn'),
        startButton: document.getElementById('start-btn'),
        soundButton: document.getElementById('sound-btn'),
        restartButton: document.getElementById('restart-btn'),
        display: document.getElementById('display'),
        message: document.querySelector('.message-text'),
        score: document.getElementById('score'),
        level: document.getElementById('level'),
        caixaMensagem: document.getElementById('message'),
        ranking: document.getElementById('ranking'),
        overlay: document.getElementById('overlay'),
        rankingList: document.getElementById('ranking-list'),
        showRanking: document.getElementById('show-ranking'),
        closeRanking: document.getElementById('close-ranking'),
        simonBoard: document.querySelector('.simon-board')
    };

    // Sons
    const sons = {
        green: new Audio('https://s3.amazonaws.com/freecodecamp/simonSound1.mp3'),
        red: new Audio('https://s3.amazonaws.com/freecodecamp/simonSound2.mp3'),
        yellow: new Audio('https://s3.amazonaws.com/freecodecamp/simonSound3.mp3'),
        blue: new Audio('https://s3.amazonaws.com/freecodecamp/simonSound4.mp3'),
        error: new Audio('https://assets.mixkit.co/sfx/preview/mixkit-wrong-answer-fail-notification-946.mp3'),
        victory: new Audio('https://assets.mixkit.co/sfx/preview/mixkit-winning-chimes-2015.mp3')
    };

    const estadoJogo = {
        sequence: [],
        playerSequence: [],
        level: 1,
        score: 0,
        isPlaying: false,
        isComputerPlaying: false,
        colors: ['green', 'red', 'yellow', 'blue'],
        currentColors: ['green', 'red', 'yellow', 'blue'],
        somAtivado: true,
        maxLevel: 25
    };

    // Iniciar o jogo
    function iniciarJogo() {
        estadoJogo.sequence = [];
        estadoJogo.playerSequence = [];
        estadoJogo.level = 1;
        estadoJogo.score = 0;
        estadoJogo.isPlaying = false;
        estadoJogo.isComputerPlaying = false;
        atualizarUI();
        definirMensagem('Pressione START para começar!', 'info');
    }

    // Começa o jogo
    function comecarJogo() {
        if (estadoJogo.isPlaying) return;

        estadoJogo.isPlaying = true;
        estadoJogo.sequence = [];
        estadoJogo.playerSequence = [];
        estadoJogo.level = 1;
        estadoJogo.score = 0;

        atualizarUI();
        adicionarCorSequencia();
        reproduzirSequencia();
    }

    // Adiciona uma cor aleatória à sequência
    function adicionarCorSequencia() {
        const randomColor = estadoJogo.colors[
            Math.floor(Math.random() * estadoJogo.colors.length)
        ];
        estadoJogo.sequence.push(randomColor);
    }

    // Reproduz a sequência atual
    function reproduzirSequencia() {
        estadoJogo.isComputerPlaying = true;
        definirMensagem('Observe a sequência...', 'info');

        let i = 0;
        const interval = setInterval(() => {
            if (i >= estadoJogo.sequence.length) {
                clearInterval(interval);
                estadoJogo.isComputerPlaying = false;
                definirMensagem('Sua vez! Repita a sequência.', 'success');
                return;
            }

            const color = estadoJogo.sequence[i];
            acenderBotao(color);
            i++;
        }, 800);
    }

    // Acende um botão
    function acenderBotao(color) {
        const button = document.querySelector(`.simon-btn.${color}`);
        if (!button) return;

        button.classList.remove('active');
        button.offsetHeight;
        button.classList.add('active');
        tocarSom(color);

        setTimeout(() => {
            button.classList.remove('active');
        }, 500);
    }

    // Toca o som correspondente à cor
    function tocarSom(color) {
        if (!estadoJogo.somAtivado) return;
        if (sons[color]) {
            sons[color].currentTime = 0;
            sons[color].play().catch(e => console.log("Erro ao reproduzir som:", e));
        }
    }

    // Verifica a jogada do jogador
    function verificarJogada(color) {
        if (estadoJogo.isComputerPlaying || !estadoJogo.isPlaying) return;

        acenderBotao(color);
        estadoJogo.playerSequence.push(color);

        // Verifica se a jogada está correta
        if (estadoJogo.playerSequence[estadoJogo.playerSequence.length - 1] !==
            estadoJogo.sequence[estadoJogo.playerSequence.length - 1]) {

            if (estadoJogo.somAtivado) sons.error.play();
            definirMensagem('Errou! Digite seu nome para o ranking.', 'error');

            const nome = prompt('Digite seu nome para o ranking:');
            salvarRanking(nome || 'Anônimo', estadoJogo.score);
            setTimeout(() => location.reload(), 1000);
            return;
        }

        // Verifica se completou a sequência
        if (estadoJogo.playerSequence.length === estadoJogo.sequence.length) {
            estadoJogo.score += estadoJogo.level * 10;
            estadoJogo.level++;
            estadoJogo.playerSequence = [];

            atualizarUI();

            if (estadoJogo.level > estadoJogo.maxLevel) {
                if (estadoJogo.somAtivado) sons.victory.play();
                definirMensagem('Parabéns! Você venceu!', 'success');
                const nome = prompt('Digite seu nome para o ranking:');
                salvarRanking(nome || 'Anônimo', estadoJogo.score);
                setTimeout(() => location.reload(), 1000);
                return;
            }

            definirMensagem('Ótimo! Próximo nível...', 'success');
            setTimeout(() => {
                adicionarCorSequencia();
                reproduzirSequencia();
            }, 1500);
        }
    }

    // Atualiza a interface
    function atualizarUI() {
        elementos.display.textContent = estadoJogo.level.toString().padStart(2, '0');
        elementos.score.textContent = estadoJogo.score;
        elementos.level.textContent = estadoJogo.level;
    }

    // Alterna o som
    function alternarSom() {
        estadoJogo.somAtivado = !estadoJogo.somAtivado;
        elementos.soundButton.innerHTML =
            estadoJogo.somAtivado ?
            '<i class="fas fa-volume-up"></i> SOM' :
            '<i class="fas fa-volume-mute"></i> SOM';
    }

    // Configura mensagem na tela
    function definirMensagem(texto, tipo = 'info') {
        elementos.message.textContent = texto;
        elementos.caixaMensagem.className = 'message-box ' + tipo;
    }

    // Salva no ranking
    function salvarRanking(nome, pontos) {
        const ranking = JSON.parse(localStorage.getItem('simonRanking')) || [];
        ranking.push({
            nome: nome || 'Anônimo',
            pontos,
            data: new Date().toLocaleDateString('pt-BR')
        });

        ranking.sort((a, b) => b.pontos - a.pontos);
        localStorage.setItem('simonRanking', JSON.stringify(ranking.slice(0, 10)));
    }

    // Mostra ranking
    function mostrarRanking() {
        const ranking = JSON.parse(localStorage.getItem('simonRanking')) || [];
        elementos.rankingList.innerHTML = ranking.map((jogador, index) => `
            <li>
                <span class="rank">${index + 1}º</span>
                <span class="name">${jogador.nome}</span>
                <span class="score">${jogador.pontos} pts</span>
                <span class="date">${jogador.data}</span>
            </li>
        `).join('');

        elementos.ranking.classList.remove('hidden');
        elementos.overlay.classList.remove('hidden');
    }

    // Event Listeners
    elementos.simonButtons.forEach(button => {
        button.addEventListener('click', () => {
            const color = button.dataset.color;
            verificarJogada(color);
        });
    });

    elementos.startButton.addEventListener('click', comecarJogo);
    elementos.soundButton.addEventListener('click', alternarSom);
    elementos.restartButton.addEventListener('click', iniciarJogo);
    elementos.showRanking.addEventListener('click', mostrarRanking);
    elementos.closeRanking.addEventListener('click', () => {
        elementos.ranking.classList.add('hidden');
        elementos.overlay.classList.add('hidden');
    });
    elementos.overlay.addEventListener('click', () => {
        elementos.ranking.classList.add('hidden');
        elementos.overlay.classList.add('hidden');
    });

    // Inicia o jogo
    iniciarJogo();
});